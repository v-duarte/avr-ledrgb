
ATMega328P-tp4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d4  00800100  000005de  00000672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  008002d4  008002d4  00000846  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000846  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000878  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014bc  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac9  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb3  00000000  00000000  00002a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  000035c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007aa  00000000  00000000  000039d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000700  00000000  00000000  00004182  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00004882  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_18>
  4c:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3d       	cpi	r26, 0xD4	; 212
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a4 ed       	ldi	r26, 0xD4	; 212
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 38 01 	call	0x270	; 0x270 <main>
  9e:	0c 94 ed 02 	jmp	0x5da	; 0x5da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
#include "adc.h"
static volatile uint8_t data = 0;
uint8_t flag_adc = 0;

void ADC_Init(void){
	DDRC &=~(1<<DDC3);			                                // Configuro como entrada el pin PC3.
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	87 b9       	out	0x07, r24	; 7
	DIDR0 |= (1 << ADC3D);                                      // Configuro como entrada analógica el pin PC3.
  ac:	ee e7       	ldi	r30, 0x7E	; 126
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	80 83       	st	Z, r24
	ADCSRB = 0x00;                                              // Free running mode
  b6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADCSRA |= (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0);        // Escribiendo este bit a uno se habilita el ADC y Prescaler de 8
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	83 68       	ori	r24, 0x83	; 131
  c2:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR) | (1<< REFS0) | (1 << MUX0) | (1 << MUX1); // Vref=AVCC, ADLAR = 1 => Bits convertidos en la parte alta, selecciono ADC3 como canal analogico
  c4:	ec e7       	ldi	r30, 0x7C	; 124
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	83 66       	ori	r24, 0x63	; 99
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <ADC_Lectura>:
}

void ADC_Lectura(void){
	ADCSRA |= (1<<ADSC);              //Iniciamos conversion.
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0);     //Esperamos hasta que termine la conversion.
  da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	84 ff       	sbrs	r24, 4
  e0:	fc cf       	rjmp	.-8      	; 0xda <ADC_Lectura+0xa>
	ADCSRA |= (1<<ADIF);              //Borramos el flag.
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	80 83       	st	Z, r24
	data = ADCH;                      //Guardo la parte alta de ACD en la variable data
  ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f0:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <data>
	flag_adc = 1;	                  //Este flag esta para informar al programa principal que ya termino la conversion
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <__data_end>
  fa:	08 95       	ret

000000fc <set_flag_adc>:
}

void set_flag_adc(uint8_t valor) {
	flag_adc = valor;
  fc:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <__data_end>
 100:	08 95       	ret

00000102 <get_flag_adc>:
}

uint8_t get_flag_adc(void) {
	return flag_adc;
}
 102:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
 106:	08 95       	ret

00000108 <get_adc_data>:

uint8_t get_adc_data(void) {
	return data;
 108:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <data>
}
 10c:	08 95       	ret

0000010e <ledrgb_init>:
 *  Author: Barcala
 */ 
#include "ledrgb.h"

void ledrgb_init(void){
	DDRB |= (1<<DDB1); //PIN PB1 como salida
 10e:	84 b1       	in	r24, 0x04	; 4
 110:	82 60       	ori	r24, 0x02	; 2
 112:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<DDB2); //PIN PB2 como salida
 114:	84 b1       	in	r24, 0x04	; 4
 116:	84 60       	ori	r24, 0x04	; 4
 118:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<DDB3); //PIN PB3 como salida   Dado que este valor se copia abajo.
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	88 60       	ori	r24, 0x08	; 8
 11e:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<DDB5); //PIN PB5 como salida	
 120:	84 b1       	in	r24, 0x04	; 4
 122:	80 62       	ori	r24, 0x20	; 32
 124:	84 b9       	out	0x04, r24	; 4
 126:	08 95       	ret

00000128 <Conversion>:
char cadena[3]=""; //en esta variable se va a guardar la cadena ingresada por el usuario
uint8_t r,g,b,valor,raux,gaux,baux;

uint8_t Conversion(void){
	uint8_t resolucion = 0; //Aqui se pasa el valor de cadena en vector de char a un valor tipo uint8
	for( char* ptr = cadena; *ptr; ++ptr )
 128:	e6 ed       	ldi	r30, 0xD6	; 214
 12a:	f2 e0       	ldi	r31, 0x02	; 2

char cadena[3]=""; //en esta variable se va a guardar la cadena ingresada por el usuario
uint8_t r,g,b,valor,raux,gaux,baux;

uint8_t Conversion(void){
	uint8_t resolucion = 0; //Aqui se pasa el valor de cadena en vector de char a un valor tipo uint8
 12c:	80 e0       	ldi	r24, 0x00	; 0
	for( char* ptr = cadena; *ptr; ++ptr )
 12e:	08 c0       	rjmp	.+16     	; 0x140 <Conversion+0x18>
	{
		resolucion *= 10;
 130:	88 0f       	add	r24, r24
 132:	98 2f       	mov	r25, r24
 134:	99 0f       	add	r25, r25
 136:	99 0f       	add	r25, r25
 138:	89 0f       	add	r24, r25
		resolucion += *ptr - '0';
 13a:	82 0f       	add	r24, r18
 13c:	80 53       	subi	r24, 0x30	; 48
char cadena[3]=""; //en esta variable se va a guardar la cadena ingresada por el usuario
uint8_t r,g,b,valor,raux,gaux,baux;

uint8_t Conversion(void){
	uint8_t resolucion = 0; //Aqui se pasa el valor de cadena en vector de char a un valor tipo uint8
	for( char* ptr = cadena; *ptr; ++ptr )
 13e:	31 96       	adiw	r30, 0x01	; 1
 140:	20 81       	ld	r18, Z
 142:	21 11       	cpse	r18, r1
 144:	f5 cf       	rjmp	.-22     	; 0x130 <Conversion+0x8>
		resolucion *= 10;
		resolucion += *ptr - '0';
	}
	//resolucion = 255 - resolucion; //Invertimos el valor para 255 sea el maximo brillo y 0 minimo brillo dado que la conexion esta invertida.
	return resolucion;
}
 146:	08 95       	ret

00000148 <SeleccionarColor>:

void SeleccionarColor(void){
	/* Configuracion de RGB LED*/
	SerialPort_Send_String(msj_red);
 148:	83 ee       	ldi	r24, 0xE3	; 227
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SerialPort_Send_String>
	memset(cadena, '0', 3); //Reinicio el vector para evitar problemas con posible basura que haya quedado
 150:	e6 ed       	ldi	r30, 0xD6	; 214
 152:	f2 e0       	ldi	r31, 0x02	; 2
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	90 e3       	ldi	r25, 0x30	; 48
 158:	91 83       	std	Z+1, r25	; 0x01
 15a:	80 83       	st	Z, r24
 15c:	80 e3       	ldi	r24, 0x30	; 48
 15e:	82 83       	std	Z+2, r24	; 0x02
	while (get_flag_enter() == 0); //espera hasta que el usuario ingrese un valor y enter otra vez.
 160:	0e 94 bf 02 	call	0x57e	; 0x57e <get_flag_enter>
 164:	88 23       	and	r24, r24
 166:	e1 f3       	breq	.-8      	; 0x160 <SeleccionarColor+0x18>
	set_flag_enter(0); //reinicio el flag de enter
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 c2 02 	call	0x584	; 0x584 <set_flag_enter>
	
	//Rojo
	SerialPort_Get_String_From_Buffer(cadena);
 16e:	86 ed       	ldi	r24, 0xD6	; 214
 170:	92 e0       	ldi	r25, 0x02	; 2
 172:	0e 94 17 02 	call	0x42e	; 0x42e <SerialPort_Get_String_From_Buffer>
	r = Conversion();
 176:	0e 94 94 00 	call	0x128	; 0x128 <Conversion>
 17a:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <r>
	set_flag_enter(0);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 c2 02 	call	0x584	; 0x584 <set_flag_enter>
	memset(cadena, '0', 3); //Reinicio el vector para evitar problemas con posible basura que haya quedado
 184:	e6 ed       	ldi	r30, 0xD6	; 214
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	80 e3       	ldi	r24, 0x30	; 48
 18a:	90 e3       	ldi	r25, 0x30	; 48
 18c:	91 83       	std	Z+1, r25	; 0x01
 18e:	80 83       	st	Z, r24
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	82 83       	std	Z+2, r24	; 0x02
	
	//Verde
	SerialPort_Send_String(msj_green);
 194:	8c ea       	ldi	r24, 0xAC	; 172
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SerialPort_Send_String>
	while (get_flag_enter() == 0); //espera hasta que el usuario ingrese un valor y enter otra vez.
 19c:	0e 94 bf 02 	call	0x57e	; 0x57e <get_flag_enter>
 1a0:	88 23       	and	r24, r24
 1a2:	e1 f3       	breq	.-8      	; 0x19c <SeleccionarColor+0x54>
	SerialPort_Get_String_From_Buffer(cadena);
 1a4:	86 ed       	ldi	r24, 0xD6	; 214
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	0e 94 17 02 	call	0x42e	; 0x42e <SerialPort_Get_String_From_Buffer>
	g = Conversion();
 1ac:	0e 94 94 00 	call	0x128	; 0x128 <Conversion>
 1b0:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <g>
	set_flag_enter(0); 
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 c2 02 	call	0x584	; 0x584 <set_flag_enter>
	memset(cadena, '0', 3);                    //Reinicio el vector para evitar problemas con posible basura que haya quedado
 1ba:	e6 ed       	ldi	r30, 0xD6	; 214
 1bc:	f2 e0       	ldi	r31, 0x02	; 2
 1be:	80 e3       	ldi	r24, 0x30	; 48
 1c0:	90 e3       	ldi	r25, 0x30	; 48
 1c2:	91 83       	std	Z+1, r25	; 0x01
 1c4:	80 83       	st	Z, r24
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	82 83       	std	Z+2, r24	; 0x02
	
	//Azul
	SerialPort_Send_String(msj_blue);
 1ca:	85 e7       	ldi	r24, 0x75	; 117
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SerialPort_Send_String>
	while (get_flag_enter() == 0);             //espera hasta que el usuario ingrese un valor y enter otra vez.
 1d2:	0e 94 bf 02 	call	0x57e	; 0x57e <get_flag_enter>
 1d6:	88 23       	and	r24, r24
 1d8:	e1 f3       	breq	.-8      	; 0x1d2 <SeleccionarColor+0x8a>
	SerialPort_Get_String_From_Buffer(cadena);
 1da:	86 ed       	ldi	r24, 0xD6	; 214
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	0e 94 17 02 	call	0x42e	; 0x42e <SerialPort_Get_String_From_Buffer>
	b = Conversion();
 1e2:	0e 94 94 00 	call	0x128	; 0x128 <Conversion>
 1e6:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <b>
	set_flag_enter(0);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 c2 02 	call	0x584	; 0x584 <set_flag_enter>
	memset(cadena, '0', 3);                     //Reinicio el vector para evitar problemas con posible basura que haya quedado
 1f0:	e6 ed       	ldi	r30, 0xD6	; 214
 1f2:	f2 e0       	ldi	r31, 0x02	; 2
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	90 e3       	ldi	r25, 0x30	; 48
 1f8:	91 83       	std	Z+1, r25	; 0x01
 1fa:	80 83       	st	Z, r24
 1fc:	80 e3       	ldi	r24, 0x30	; 48
 1fe:	82 83       	std	Z+2, r24	; 0x02
	
	SerialPort_Send_String(msj_fin);      /*Asignacion de valores al LED*/
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SerialPort_Send_String>
 208:	08 95       	ret

0000020a <ActualizarValor>:
		Ingreso_B(ActualizarValor(b,valor));
	}
}

uint8_t ActualizarValor(uint8_t color, uint8_t ref){ //color es el valor del color ingresado por usuario y ref es cuanto hay que cambiar el brillo
	return (color * ref) / 100;
 20a:	86 9f       	mul	r24, r22
 20c:	c0 01       	movw	r24, r0
 20e:	11 24       	eor	r1, r1
 210:	64 e6       	ldi	r22, 0x64	; 100
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 c5 02 	call	0x58a	; 0x58a <__divmodhi4>
 218:	86 2f       	mov	r24, r22
}
 21a:	08 95       	ret

0000021c <ActualizarPotenciometro>:
	
	SerialPort_Send_String(msj_fin);      /*Asignacion de valores al LED*/
}

void ActualizarPotenciometro(void){
	ADC_Lectura();	                                        //Se lee el valor del potenciometro y se guarda.
 21c:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_Lectura>
	if(get_flag_adc())                               //Se confirma si se leyo el valor del potenciometro correctamente
 220:	0e 94 81 00 	call	0x102	; 0x102 <get_flag_adc>
 224:	88 23       	and	r24, r24
 226:	19 f1       	breq	.+70     	; 0x26e <ActualizarPotenciometro+0x52>
	{
		valor = get_adc_data();                             //Leo el valor del potenciometro
 228:	0e 94 84 00 	call	0x108	; 0x108 <get_adc_data>
		valor = ((valor * 100) / 256);                      //Convierto valor en porcentaje
 22c:	24 e6       	ldi	r18, 0x64	; 100
 22e:	82 9f       	mul	r24, r18
 230:	c0 01       	movw	r24, r0
 232:	11 24       	eor	r1, r1
 234:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <valor>
		set_flag_adc(0);	                                //Se reinicia el flag del potenciometro
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 7e 00 	call	0xfc	; 0xfc <set_flag_adc>
		Ingreso_R(ActualizarValor(r,valor));
 23e:	60 91 21 03 	lds	r22, 0x0321	; 0x800321 <valor>
 242:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <r>
 246:	0e 94 05 01 	call	0x20a	; 0x20a <ActualizarValor>
 24a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Ingreso_R>
		Ingreso_G(ActualizarValor(g,valor));
 24e:	60 91 21 03 	lds	r22, 0x0321	; 0x800321 <valor>
 252:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <g>
 256:	0e 94 05 01 	call	0x20a	; 0x20a <ActualizarValor>
 25a:	0e 94 82 01 	call	0x304	; 0x304 <Ingreso_G>
		Ingreso_B(ActualizarValor(b,valor));
 25e:	60 91 21 03 	lds	r22, 0x0321	; 0x800321 <valor>
 262:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <b>
 266:	0e 94 05 01 	call	0x20a	; 0x20a <ActualizarValor>
 26a:	0e 94 8b 01 	call	0x316	; 0x316 <Ingreso_B>
 26e:	08 95       	ret

00000270 <main>:
int main(void)
{

	/* Inicializacion */
	//DDRB = 0xFF;								//Configuro Port B como salida  ¿Para?
	ledrgb_init();
 270:	0e 94 87 00 	call	0x10e	; 0x10e <ledrgb_init>
	PWM_timer1_init();
 274:	0e 94 5d 01 	call	0x2ba	; 0x2ba <PWM_timer1_init>
	PWM_timer2_init();
 278:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PWM_timer2_init>
	
	SerialPort_Init(0x67);						//Configuro el UART 9600bps, 8 bit data, 1 stop @ F_CPU = 16MHz.
 27c:	87 e6       	ldi	r24, 0x67	; 103
 27e:	0e 94 b2 01 	call	0x364	; 0x364 <SerialPort_Init>
	SerialPort_TX_Enable();						//Inicio el transmisor
 282:	0e 94 ba 01 	call	0x374	; 0x374 <SerialPort_TX_Enable>
	SerialPort_TX_Interrupt_Enable();
 286:	0e 94 c0 01 	call	0x380	; 0x380 <SerialPort_TX_Interrupt_Enable>
	
	SerialPort_RX_Enable();						//Inicio el receptor
 28a:	0e 94 cc 01 	call	0x398	; 0x398 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 28e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SerialPort_RX_Interrupt_Enable>
	
	ADC_Init();									//Inicio el potenciometro
 292:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	sei();										//Activo el flag global para interrupciones
 296:	78 94       	sei
	
	mostrarMenu();								//Muestro el menu principal
 298:	0e 94 39 02 	call	0x472	; 0x472 <mostrarMenu>
	
	
	SeleccionarColor();
 29c:	0e 94 a4 00 	call	0x148	; 0x148 <SeleccionarColor>
    while (1) 
    {		
		if (get_flag_enter())
 2a0:	0e 94 bf 02 	call	0x57e	; 0x57e <get_flag_enter>
 2a4:	88 23       	and	r24, r24
 2a6:	31 f0       	breq	.+12     	; 0x2b4 <main+0x44>
		{
			set_flag_enter(0); //reinicio el flag de enter
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 c2 02 	call	0x584	; 0x584 <set_flag_enter>
			SeleccionarColor();
 2ae:	0e 94 a4 00 	call	0x148	; 0x148 <SeleccionarColor>
 2b2:	f6 cf       	rjmp	.-20     	; 0x2a0 <main+0x30>
		}
		else 
			ActualizarPotenciometro();
 2b4:	0e 94 0e 01 	call	0x21c	; 0x21c <ActualizarPotenciometro>
 2b8:	f3 cf       	rjmp	.-26     	; 0x2a0 <main+0x30>

000002ba <PWM_timer1_init>:
 */ 
#include "pwm.h"

/*Inicializacion de PWM para PB1 y PB2 */
void PWM_timer1_init(void){
	TCNT1 = 0;                                     // Reiniciamos el contador inicial (por si acaso)
 2ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10);  //Modo 5, Fast PWM 8-bit (el TOP de esta PWM es 0xFF)
 2c2:	e0 e8       	ldi	r30, 0x80	; 128
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	81 6a       	ori	r24, 0xA1	; 161
 2ca:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12)|(1<<CS11);	               //Prescaler 8
 2cc:	e1 e8       	ldi	r30, 0x81	; 129
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	8a 60       	ori	r24, 0x0A	; 10
 2d4:	80 83       	st	Z, r24
 2d6:	08 95       	ret

000002d8 <PWM_timer2_init>:
}

/*Inicializacion de PWM para PB3, con interrupcion para PB5*/
void PWM_timer2_init(void){
	TCNT2 = 0;                                                 // Reiniciamos el contador inicial (por si acaso)
 2d8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	TCCR2A |= (1<<COM2A1)|(1<<WGM21)|(1<<WGM20);               //Modo 3, Fast PWM (el TOP de esta PWM es 0xFF)
 2dc:	e0 eb       	ldi	r30, 0xB0	; 176
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	83 68       	ori	r24, 0x83	; 131
 2e4:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS21);                                       //Prescaler 8
 2e6:	e1 eb       	ldi	r30, 0xB1	; 177
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	80 83       	st	Z, r24
	TIMSK2 |= (1<<OCIE2A)|(1<<TOIE2);				    	   //Activamos la interrupcion en modo CTC Match A y Overflow en Timer2
 2f0:	e0 e7       	ldi	r30, 0x70	; 112
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	83 60       	ori	r24, 0x03	; 3
 2f8:	80 83       	st	Z, r24
 2fa:	08 95       	ret

000002fc <Ingreso_R>:
	//sei();
}

/*Para definir los componentes RGB*/
void Ingreso_R(uint8_t r){
	rled_pwm_threshold = 255 - r;
 2fc:	80 95       	com	r24
 2fe:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 302:	08 95       	ret

00000304 <Ingreso_G>:
}

void Ingreso_G(uint8_t g){
	gled_pwm_threshold = 255 - g;
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	28 1b       	sub	r18, r24
 30a:	31 09       	sbc	r19, r1
 30c:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 310:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 314:	08 95       	ret

00000316 <Ingreso_B>:
}

void Ingreso_B(uint8_t b){
	bled_pwm_threshold = 255 - b;
 316:	2f ef       	ldi	r18, 0xFF	; 255
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	28 1b       	sub	r18, r24
 31c:	31 09       	sbc	r19, r1
 31e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 322:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 326:	08 95       	ret

00000328 <__vector_7>:
}

/*Las siguientes interrupciones sirven para copiar el la señal pwm de OC2A en PB5 debido a como esta conectado el LED en el kit*/
ISR(TIMER2_COMPA_vect)
{
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	8f 93       	push	r24
	PORTB &=~(1<<5);
 334:	85 b1       	in	r24, 0x05	; 5
 336:	8f 7d       	andi	r24, 0xDF	; 223
 338:	85 b9       	out	0x05, r24	; 5
}
 33a:	8f 91       	pop	r24
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__vector_9>:

ISR(TIMER2_OVF_vect){
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	8f 93       	push	r24
	PORTB |= (1<<5);
 352:	85 b1       	in	r24, 0x05	; 5
 354:	80 62       	ori	r24, 0x20	; 32
 356:	85 b9       	out	0x05, r24	; 5
 358:	8f 91       	pop	r24
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <SerialPort_Init>:
	if ( (UCSR0A & (1<<RXC0))==1) {
		*dato=UDR0;
		return 1;
	}
	return 0; //no data
}
 364:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 368:	96 e0       	ldi	r25, 0x06	; 6
 36a:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 36e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 372:	08 95       	ret

00000374 <SerialPort_TX_Enable>:
 374:	e1 ec       	ldi	r30, 0xC1	; 193
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	88 60       	ori	r24, 0x08	; 8
 37c:	80 83       	st	Z, r24
 37e:	08 95       	ret

00000380 <SerialPort_TX_Interrupt_Enable>:
 380:	e1 ec       	ldi	r30, 0xC1	; 193
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	80 62       	ori	r24, 0x20	; 32
 388:	80 83       	st	Z, r24
 38a:	08 95       	ret

0000038c <SerialPort_TX_Interrupt_Disable>:
 38c:	e1 ec       	ldi	r30, 0xC1	; 193
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	8f 7d       	andi	r24, 0xDF	; 223
 394:	80 83       	st	Z, r24
 396:	08 95       	ret

00000398 <SerialPort_RX_Enable>:
 398:	e1 ec       	ldi	r30, 0xC1	; 193
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	80 61       	ori	r24, 0x10	; 16
 3a0:	80 83       	st	Z, r24
 3a2:	08 95       	ret

000003a4 <SerialPort_RX_Interrupt_Enable>:
 3a4:	e1 ec       	ldi	r30, 0xC1	; 193
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	80 83       	st	Z, r24
 3ae:	08 95       	ret

000003b0 <SerialPort_Wait_For_TX_Buffer_Free>:
 3b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3b4:	85 ff       	sbrs	r24, 5
 3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <SerialPort_Wait_For_TX_Buffer_Free>
 3b8:	08 95       	ret

000003ba <SerialPort_Send_Data>:
 3ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3be:	08 95       	ret

000003c0 <SerialPort_Send_String>:
 3c0:	ef 92       	push	r14
 3c2:	ff 92       	push	r15
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	7c 01       	movw	r14, r24
 3cc:	c0 e0       	ldi	r28, 0x00	; 0
 3ce:	07 c0       	rjmp	.+14     	; 0x3de <SerialPort_Send_String+0x1e>
 3d0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <SerialPort_Wait_For_TX_Buffer_Free>
 3d4:	f8 01       	movw	r30, r16
 3d6:	80 81       	ld	r24, Z
 3d8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <SerialPort_Send_Data>
 3dc:	cf 5f       	subi	r28, 0xFF	; 255
 3de:	87 01       	movw	r16, r14
 3e0:	0c 0f       	add	r16, r28
 3e2:	11 1d       	adc	r17, r1
 3e4:	f8 01       	movw	r30, r16
 3e6:	80 81       	ld	r24, Z
 3e8:	81 11       	cpse	r24, r1
 3ea:	f2 cf       	rjmp	.-28     	; 0x3d0 <SerialPort_Send_String+0x10>
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	ff 90       	pop	r15
 3f4:	ef 90       	pop	r14
 3f6:	08 95       	ret

000003f8 <SerialPort_Get_Char_From_Buffer>:
 3f8:	dc 01       	movw	r26, r24
 3fa:	20 91 1b 03 	lds	r18, 0x031B	; 0x80031b <RXindice_lectura>
 3fe:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <RXindice_escritura>
 402:	29 17       	cp	r18, r25
 404:	70 f4       	brcc	.+28     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 406:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <RXindice_lectura>
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	e7 52       	subi	r30, 0x27	; 39
 40e:	fd 4f       	sbci	r31, 0xFD	; 253
 410:	80 81       	ld	r24, Z
 412:	8c 93       	st	X, r24
 414:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <RXindice_lectura>
 418:	8f 5f       	subi	r24, 0xFF	; 255
 41a:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <RXindice_lectura>
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	08 95       	ret
 422:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <RXindice_lectura>
 426:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <RXindice_escritura>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret

0000042e <SerialPort_Get_String_From_Buffer>:
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	1f 92       	push	r1
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	8c 01       	movw	r16, r24
 43e:	19 82       	std	Y+1, r1	; 0x01
 440:	ce 01       	movw	r24, r28
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SerialPort_Get_Char_From_Buffer>
 448:	88 23       	and	r24, r24
 44a:	29 f0       	breq	.+10     	; 0x456 <SerialPort_Get_String_From_Buffer+0x28>
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	f8 01       	movw	r30, r16
 450:	81 93       	st	Z+, r24
 452:	8f 01       	movw	r16, r30
 454:	02 c0       	rjmp	.+4      	; 0x45a <SerialPort_Get_String_From_Buffer+0x2c>
 456:	8a e0       	ldi	r24, 0x0A	; 10
 458:	89 83       	std	Y+1, r24	; 0x01
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	8a 30       	cpi	r24, 0x0A	; 10
 45e:	81 f7       	brne	.-32     	; 0x440 <SerialPort_Get_String_From_Buffer+0x12>
 460:	f8 01       	movw	r30, r16
 462:	10 82       	st	Z, r1
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0f 90       	pop	r0
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <mostrarMenu>:

//Funciones para el TP

void mostrarMenu(){
	SerialPort_Send_String("Control de un LED RGB \n\r");
 472:	89 e2       	ldi	r24, 0x29	; 41
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SerialPort_Send_String>
	SerialPort_Send_String("Para encender el LED, ingrese los componentes R, G y B \n\r");
 47a:	82 e4       	ldi	r24, 0x42	; 66
 47c:	92 e0       	ldi	r25, 0x02	; 2
 47e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SerialPort_Send_String>
	SerialPort_Send_String("Se ingresan de a uno a la vez. Al ingresar un valor, presionar ENTER para continuar. \n\r");
 482:	8c e7       	ldi	r24, 0x7C	; 124
 484:	92 e0       	ldi	r25, 0x02	; 2
 486:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SerialPort_Send_String>
 48a:	08 95       	ret

0000048c <__vector_18>:
}

ISR(USART_RX_vect){		//Interrupcion de que hay algo para recibir de la UART
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	8f 93       	push	r24
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
	RX_Buffer[RXindice_escritura]= UDR0;	//Guarda el valor ingresado en el buffer
 49c:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <RXindice_escritura>
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4a6:	e7 52       	subi	r30, 0x27	; 39
 4a8:	fd 4f       	sbci	r31, 0xFD	; 253
 4aa:	80 83       	st	Z, r24
	if (RX_Buffer[RXindice_escritura]=='\r')	//Si el valor guardado es un ENTER
 4ac:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <RXindice_escritura>
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	e7 52       	subi	r30, 0x27	; 39
 4b4:	fd 4f       	sbci	r31, 0xFD	; 253
 4b6:	80 81       	ld	r24, Z
 4b8:	8d 30       	cpi	r24, 0x0D	; 13
 4ba:	51 f4       	brne	.+20     	; 0x4d0 <__vector_18+0x44>
	{
		RX_Buffer[RXindice_escritura]= '\0';	//Remplaza el valor por un vacio '\0'
 4bc:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <RXindice_escritura>
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	e7 52       	subi	r30, 0x27	; 39
 4c4:	fd 4f       	sbci	r31, 0xFD	; 253
 4c6:	10 82       	st	Z, r1
		flag_enter = 1;	//Activa el flag de que se apreto ENTER
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <flag_enter>
 4ce:	12 c0       	rjmp	.+36     	; 0x4f4 <__vector_18+0x68>
	}else
	{
		if (RXindice_escritura==(RX_BUFFER_LENGTH-1)) //Si i llego a la posicion maxima del buffer
 4d0:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <RXindice_escritura>
 4d4:	8f 31       	cpi	r24, 0x1F	; 31
 4d6:	49 f4       	brne	.+18     	; 0x4ea <__vector_18+0x5e>
		{
			RXindice_escritura=0;	//Resetea el valor
 4d8:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <RXindice_escritura>
			RX_Buffer[RXindice_escritura]= 'a';	//Se pone una 'a' en la primera posicion para que ya el valor quede invalido y el usuario pueda seguir ingresando caracteres
 4dc:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <RXindice_escritura>
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	e7 52       	subi	r30, 0x27	; 39
 4e4:	fd 4f       	sbci	r31, 0xFD	; 253
 4e6:	81 e6       	ldi	r24, 0x61	; 97
 4e8:	80 83       	st	Z, r24
		}
		RXindice_escritura++;	//Se incrementa el indice
 4ea:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <RXindice_escritura>
 4ee:	8f 5f       	subi	r24, 0xFF	; 255
 4f0:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <RXindice_escritura>
	}
}
 4f4:	ff 91       	pop	r31
 4f6:	ef 91       	pop	r30
 4f8:	8f 91       	pop	r24
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	0f 90       	pop	r0
 500:	1f 90       	pop	r1
 502:	18 95       	reti

00000504 <__vector_19>:

ISR(USART_UDRE_vect)	//Interrupcion de que se puede transmitir en la UART
{
 504:	1f 92       	push	r1
 506:	0f 92       	push	r0
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	0f 92       	push	r0
 50c:	11 24       	eor	r1, r1
 50e:	2f 93       	push	r18
 510:	3f 93       	push	r19
 512:	4f 93       	push	r20
 514:	5f 93       	push	r21
 516:	6f 93       	push	r22
 518:	7f 93       	push	r23
 51a:	8f 93       	push	r24
 51c:	9f 93       	push	r25
 51e:	af 93       	push	r26
 520:	bf 93       	push	r27
 522:	ef 93       	push	r30
 524:	ff 93       	push	r31
	if (TXindice_lectura != TXindice_escritura) //Si tengo datos para transmitir
 526:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <TXindice_lectura>
 52a:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <TXindice_escritura>
 52e:	98 17       	cp	r25, r24
 530:	99 f0       	breq	.+38     	; 0x558 <__vector_19+0x54>
	{
		UDR0= TX_Buffer[TXindice_lectura]; //Transmito un caracter del buffer
 532:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <TXindice_lectura>
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	e7 50       	subi	r30, 0x07	; 7
 53a:	fd 4f       	sbci	r31, 0xFD	; 253
 53c:	80 81       	ld	r24, Z
 53e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		TXindice_lectura= (TXindice_lectura+1)%(TX_BUFFER_LENGTH-1);	//Incremento en uno el valor del indice de lectura o lo reseteo si llego al limite
 542:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <TXindice_lectura>
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	6f e1       	ldi	r22, 0x1F	; 31
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	0e 94 c5 02 	call	0x58a	; 0x58a <__divmodhi4>
 552:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <TXindice_lectura>
 556:	02 c0       	rjmp	.+4      	; 0x55c <__vector_19+0x58>
	}else //Si no hay mas nada para transmitir
	{
		SerialPort_TX_Interrupt_Disable(); //Desactivo las interrupciones de transmision
 558:	0e 94 c6 01 	call	0x38c	; 0x38c <SerialPort_TX_Interrupt_Disable>
	}
}
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	bf 91       	pop	r27
 562:	af 91       	pop	r26
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	7f 91       	pop	r23
 56a:	6f 91       	pop	r22
 56c:	5f 91       	pop	r21
 56e:	4f 91       	pop	r20
 570:	3f 91       	pop	r19
 572:	2f 91       	pop	r18
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <get_flag_enter>:

uint8_t get_flag_enter(void) //Esta funcion devuelve el valor del flag indicando si se presiono la tecla ENTER
{
	return flag_enter;
 57e:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <flag_enter>
}
 582:	08 95       	ret

00000584 <set_flag_enter>:

void set_flag_enter(uint8_t valor) //Esta funcion asigna el valor del flag_enter por el valor pasado en la funcion
{
	flag_enter = valor;
 584:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <flag_enter>
 588:	08 95       	ret

0000058a <__divmodhi4>:
 58a:	97 fb       	bst	r25, 7
 58c:	07 2e       	mov	r0, r23
 58e:	16 f4       	brtc	.+4      	; 0x594 <__divmodhi4+0xa>
 590:	00 94       	com	r0
 592:	07 d0       	rcall	.+14     	; 0x5a2 <__divmodhi4_neg1>
 594:	77 fd       	sbrc	r23, 7
 596:	09 d0       	rcall	.+18     	; 0x5aa <__divmodhi4_neg2>
 598:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__udivmodhi4>
 59c:	07 fc       	sbrc	r0, 7
 59e:	05 d0       	rcall	.+10     	; 0x5aa <__divmodhi4_neg2>
 5a0:	3e f4       	brtc	.+14     	; 0x5b0 <__divmodhi4_exit>

000005a2 <__divmodhi4_neg1>:
 5a2:	90 95       	com	r25
 5a4:	81 95       	neg	r24
 5a6:	9f 4f       	sbci	r25, 0xFF	; 255
 5a8:	08 95       	ret

000005aa <__divmodhi4_neg2>:
 5aa:	70 95       	com	r23
 5ac:	61 95       	neg	r22
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255

000005b0 <__divmodhi4_exit>:
 5b0:	08 95       	ret

000005b2 <__udivmodhi4>:
 5b2:	aa 1b       	sub	r26, r26
 5b4:	bb 1b       	sub	r27, r27
 5b6:	51 e1       	ldi	r21, 0x11	; 17
 5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <__udivmodhi4_ep>

000005ba <__udivmodhi4_loop>:
 5ba:	aa 1f       	adc	r26, r26
 5bc:	bb 1f       	adc	r27, r27
 5be:	a6 17       	cp	r26, r22
 5c0:	b7 07       	cpc	r27, r23
 5c2:	10 f0       	brcs	.+4      	; 0x5c8 <__udivmodhi4_ep>
 5c4:	a6 1b       	sub	r26, r22
 5c6:	b7 0b       	sbc	r27, r23

000005c8 <__udivmodhi4_ep>:
 5c8:	88 1f       	adc	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	5a 95       	dec	r21
 5ce:	a9 f7       	brne	.-22     	; 0x5ba <__udivmodhi4_loop>
 5d0:	80 95       	com	r24
 5d2:	90 95       	com	r25
 5d4:	bc 01       	movw	r22, r24
 5d6:	cd 01       	movw	r24, r26
 5d8:	08 95       	ret

000005da <_exit>:
 5da:	f8 94       	cli

000005dc <__stop_program>:
 5dc:	ff cf       	rjmp	.-2      	; 0x5dc <__stop_program>
